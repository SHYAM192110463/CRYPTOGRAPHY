#include <stdio.h>
#include <string.h>

void rail_fence_encrypt(char *message, int rails) {
    int message_len = strlen(message);
    char rail_fence[rails][message_len];
    int i, j, k = 0;
 
    for (i = 0; i < rails; i++) {
        for (j = 0; j < message_len; j++) {
            rail_fence[i][j] = ' ';
        }
    }

    for (i = 0; i < rails; i++) {
        for (j = 0; j < message_len; j++) {
            if (k >= message_len)
                break;
            if (i % (rails - 1) == 0 || i % (rails - 1) == rails - 1 - i % (rails - 1)) {
                rail_fence[i][j] = message[k++];
            }
        }
    }

    printf("Encrypted message: ");
    for (i = 0; i < rails; i++) {
        for (j = 0; j < message_len; j++) {
            if (rail_fence[i][j] != ' ')
                printf("%c", rail_fence[i][j]);
        }
    }
    printf("\n");
}

void rail_fence_decrypt(char *message, int rails) {
    int message_len = strlen(message);
    char rail_fence[rails][message_len];
    int i, j, k = 0;

    for (i = 0; i < rails; i++) {
        for (j = 0; j < message_len; j++) {
            rail_fence[i][j] = ' ';
        }
    }

    int rail_counts[rails];
    memset(rail_counts, 0, sizeof(rail_counts));
    int rail = 0;
    int direction = 1;
    for (i = 0; i < message_len; i++) {
        rail_counts[rail]++;
        rail += direction;
        if (rail == rails - 1 || rail == 0)
            direction *= -1;
    }

    for (i = 0; i < rails; i++) {
        for (j = 0; j < rail_counts[i]; j++) {
            rail_fence[i][j] = message[k++];
        }
    }

    printf("Decrypted message: ");
    rail = 0;
    direction = 1;
    for (i = 0; i < message_len; i++) {
        printf("%c", rail_fence[rail][i]);
        rail += direction;
        if (rail == rails - 1 || rail == 0)
            direction *= -1;
    }
    printf("\n");
}

int main() {
    char message[1000];
    int rails;

    printf("Enter message to encrypt: ");
    fgets(message, sizeof(message), stdin);

    printf("Enter the number of rails: ");
    scanf("%d", &rails);

    message[strcspn(message, "\n")] = '\0';

    rail_fence_encrypt(message, rails);

    rail_fence_decrypt(message, rails);

    return 0;
}
