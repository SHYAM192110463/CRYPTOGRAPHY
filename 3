#include <stdio.h>
#include <stdint.h>
#include <string.h>

// Constants defined by the MD5 algorithm
#define MD5_BLOCK_SIZE 64
#define MD5_DIGEST_SIZE 16

// Functions for MD5 algorithm
uint32_t left_rotate(uint32_t x, uint32_t n) {
    return (x << n) | (x >> (32 - n));
}

void md5_transform(uint32_t state[4], const uint8_t block[MD5_BLOCK_SIZE]) {
    // Constants defined by the MD5 algorithm
    static const uint32_t k[64] = {
        0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee, 0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501,
        0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be, 0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821,
        0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa, 0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8,
        0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed, 0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a,
        0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c, 0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70,
        0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05, 0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665,
        0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039, 0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1,
        0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1, 0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391
    };

    // Initialize hash values
    uint32_t a = state[0], b = state[1], c = state[2], d = state[3];

    // Decode input block to 16 32-bit words
    uint32_t m[16];
    for (int i = 0; i < 16; i++) {
        m[i] = block[i * 4];
        m[i] |= block[i * 4 + 1] << 8;
        m[i] |= block[i * 4 + 2] << 16;
        m[i] |= block[i * 4 + 3] << 24;
    }

    // Main loop
    for (int i = 0; i < 64; i++) {
        uint32_t f, g;

        if (i < 16) {
            f = (b & c) | ((~b) & d);
            g = i;
        } else if (i < 32) {
            f = (d & b) | ((~d) & c);
            g = (5 * i + 1) % 16;
        } else if (i < 48) {
            f = b ^ c ^ d;
            g = (3 * i + 5) % 16;
        } else {
            f = c ^ (b | (~d));
            g = (7 * i) % 16;
        }

        uint32_t temp = d;
        d = c;
        c = b;
        b = b + left_rotate((a + f + k[i] + m[g]), 7);
        a = temp;
    }

    // Update hash values
    state[0] += a;
    state[1] += b;
    state[2] += c;
    state[3] += d;
}

// Function to perform MD5 hash
void md5_hash(const uint8_t *message, size_t len, uint8_t digest[MD5_DIGEST_SIZE]) {
    // Initialize MD buffer
    uint32_t state[4] = {0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476};

    // Initialize number of bits
    uint64_t bitlen = len * 8;

    // Pre-processing: padding the message
    uint8_t padding[MD5_BLOCK_SIZE];
    size_t padding_len = (len % MD5_BLOCK_SIZE < 56) ? 56 - (len % MD5_BLOCK_SIZE) : 120 - (len % MD5_BLOCK_SIZE);
    padding[0] = 0x80;
    memset(padding + 1, 0, padding_len - 1);
    memcpy(padding + padding_len - 8, &bitlen, 8);

    // Process the message in blocks
    for (size_t i = 0; i < len + padding_len; i += MD5_BLOCK_SIZE) {
        uint8_t block[MD5_BLOCK_SIZE];
        memcpy(block, message + i, MD5_BLOCK_SIZE);
        if (i + MD5_BLOCK_SIZE > len + padding_len) {
            memcpy(block + len + padding_len - i, padding, MD5_BLOCK_SIZE - (len + padding_len - i));
        }
        md5_transform(state, block);
    }

    // Copy final hash to digest
    for (int i = 0; i < 4; i++) {
        digest[i * 4] = (uint8_t)(state[i] & 0xFF);
        digest[i * 4 + 1] = (uint8_t)((state[i] >> 8) & 0xFF);
        digest[i * 4 + 2] = (uint8_t)((state[i] >> 16) & 0xFF);
        digest[i * 4 + 3] = (uint8_t)((state[i] >> 24) & 0xFF);
    }
}

// Function to print the digest
void print_digest(uint8_t digest[MD5_DIGEST_SIZE]) {
    for (int i = 0; i < MD5_DIGEST_SIZE; i++) {
        printf("%02x", digest[i]);
    }
    printf("\n");
}

int main() {
    const char *message = "Hello, World!";
    uint8_t digest[MD5_DIGEST_SIZE];

    // Compute MD5 hash
    md5_hash((uint8_t *)message, strlen(message), digest);

    // Print the digest
    printf("MD5 Digest: ");
    print_digest(digest);

    return 0;
}
